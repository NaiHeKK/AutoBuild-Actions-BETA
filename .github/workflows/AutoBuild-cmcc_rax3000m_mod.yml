###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: CMCC RAX3000M MOD

### 界面控制部分 ( 以下内容请保持不变 )
on:
  repository_dispatch:
    types: ['LEDE Update']
  workflow_dispatch:
    inputs:
      Tempoary_IP:
        description: '固件 IP 地址 [可选]'
        default: ''
      Tempoary_MEMORY:
        description: '路由器内存 [可选]'
        default: '256M'
        type: choice
        options:
          - '128M'
          - '256M'
      CACHE_ACCELERATE:
        description: 'Cache 加速编译'
        type: boolean
        default: false
      Tempoary_SOURCE:
        description: '源码仓库 [可选]'
        default: 'coolsnowwolf/lede:master'
        type: choice
        options:
          - 'hanwckf/immortalwrt-mt798x:openwrt-21.02'
          - 'padavanonly/immortalwrt-mt798x:openwrt-21.02'
          - 'coolsnowwolf/lede:master'
          - 'immortalwrt/immortalwrt:master'
      Testing_KERNEL:
        description: '启用测试版内核？'
        default: false
        type: boolean
      INCLUDE_DOCKER:
        description: '添加Docker？'
        default: false
        type: boolean
      INCLUDE_KENZOK8:
        description: '添加KENZOK8软件库 [可选]'
        default: ''
        type: choice
        options:
          - ''
          - 'openwrt-packages'
          - 'small-package'
  ### 界面控制部分结束 ( 以上内容请保持不变 )

  ## Git Push 时触发编译(不要删除此行注释)
  #push:
  #  branches: 
  #    - master
  
  ## 定时触发编译(不要删除此行注释)
  #schedule:
  #  - cron: 0 8 * * 5
  
  ## 重新点亮 Star 时触发编译(不要删除此行注释)
  #watch:
  #  types: [started]

### 请按需求修改以下内容
### 环境变量设置
env:
# 编译时调用的 [.config] 文件名称
  CONFIG_FILE: cmcc_rax3000m
# 源码仓库:分支
# DEFAULT_SOURCE: hanwckf/immortalwrt-mt798x:openwrt-21.02
# 上传固件到 Github Releases
  UPLOAD_RELEASES: true
# 上传固件到 Github Artifacts
  UPLOAD_ARTIFACTS: false
# 上传 bin 文件夹到 Github Artifacts
  UPLOAD_BIN_ARTIFACTS: false
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
# 删除早期的 workflow 任务
  DELETE_OLD_WORKFLOW: false
# Cache 加速编译
  CACHE_ACCELERATE: false
# RELEASE_TAG_NAME
  RELEASE_TAG_NAME: RAX3000M
### 结束
### 请按需求修改以上内容

jobs:
  Compile:
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
    - name: "Optimize disk space"
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Free up disk space
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        if [ -n "${{ github.event.inputs.Tempoary_CONFIG }}" ]
        then
            if [ -f "$GITHUB_WORKSPACE/Configs/${{ github.event.inputs.Tempoary_CONFIG }}" ]
            then
                CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}
            else
                CONFIG_FILE=${{ env.CONFIG_FILE }}
            fi
        else
            CONFIG_FILE=${{ env.CONFIG_FILE }}
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_IP }}" ]
        then
            echo "IP: [${{ github.event.inputs.Tempoary_IP }}]"
            echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_FLAG }}" ]
        then
            echo "FLAG: [${{ github.event.inputs.Tempoary_FLAG }}]"
            echo "Tempoary_FLAG=${{ github.event.inputs.Tempoary_FLAG }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_MEMORY }}" ]
        then
            echo "MEMORY: [${{ github.event.inputs.Tempoary_MEMORY }}]"
            echo "Tempoary_MEMORY=${{ github.event.inputs.Tempoary_MEMORY }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_SOURCE }}" ]
        then
            DEFAULT_SOURCE=${{ github.event.inputs.Tempoary_SOURCE }}
            echo "DEFAULT_SOURCE=$DEFAULT_SOURCE" >> $GITHUB_ENV
            echo "SOURCE: [${{ github.event.inputs.Tempoary_SOURCE }}]"
            echo "DEFAULT_SOURCE: $DEFAULT_SOURCE"
        fi
        RELEASE_TAG_NAME=${{ env.RELEASE_TAG_NAME }}
        if [[ "$DEFAULT_SOURCE" =~ "lede" ]]
        then
            echo "LEDE"
            echo "Tempoary_FLAG=LEDE" >> $GITHUB_ENV
            CONFIG_FILE=${{ env.CONFIG_FILE }}_LEDE
            RELEASE_TAG_NAME=${RELEASE_TAG_NAME}_LEDE
            if [ "${{ github.event.inputs.Testing_KERNEL }}" == true ]
            then
                echo "Testing_KERNEL"
                CONFIG_FILE=${CONFIG_FILE}_TESTKERNEL
                RELEASE_TAG_NAME=${RELEASE_TAG_NAME}_TESTKERNEL
            fi
        elif [[ "$DEFAULT_SOURCE" =~ "hanwckf" ]]
        then
            echo "Tempoary_FLAG=hanwckf" >> $GITHUB_ENV
            CONFIG_FILE=${{ env.CONFIG_FILE }}
            RELEASE_TAG_NAME=${RELEASE_TAG_NAME}_HANW
            echo "hanwckf"
        elif [[ "$DEFAULT_SOURCE" =~ "padavanonly" ]]
        then
            echo "Tempoary_FLAG=padavanonly" >> $GITHUB_ENV
            CONFIG_FILE=${{ env.CONFIG_FILE }}_PADA
            RELEASE_TAG_NAME=${RELEASE_TAG_NAME}_PADA
            echo "padavanonly"
        elif [[ "$DEFAULT_SOURCE" =~ "immortalwrt" ]]
        then
            echo "Tempoary_FLAG=immortalwrt" >> $GITHUB_ENV
            CONFIG_FILE=${{ env.CONFIG_FILE }}_IMM
            RELEASE_TAG_NAME=${RELEASE_TAG_NAME}_IMM
            echo "immortalwrt"
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.INCLUDE_KENZOK8 }}" ]
        then
            echo "INCLUDE_KENZOK8: [${{ github.event.inputs.INCLUDE_KENZOK8 }}]"
            echo "INCLUDE_KENZOK8=${{ github.event.inputs.INCLUDE_KENZOK8 }}" >> $GITHUB_ENV
        fi
        echo "RELEASE_TAG_NAME=$RELEASE_TAG_NAME" >> $GITHUB_ENV
        REPO_URL="https://github.com/$(cut -d \: -f 1 <<< $DEFAULT_SOURCE)"
        REPO_BRANCH=$(cut -d \: -f 2 <<< $DEFAULT_SOURCE)
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV
        echo "CACHE_ACCELERATE=${{ github.event.inputs.CACHE_ACCELERATE }}" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Clone Openwrt Source Code
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        git submodule update --init --recursive  
        if [ "${{ env.INCLUDE_KENZOK8 }}" == "openwrt-packages" ]
        then
            echo "INCLUDE_KENZOK8 openwrt-packages"
            sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
            sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default
        elif [ "${{ env.INCLUDE_KENZOK8 }}" == "small-package" ]
        then
            echo "INCLUDE_KENZOK8 small-package"
            sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
        fi
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        if [ "${{ env.INCLUDE_KENZOK8 }}" == "small-package" ]
        then
            rm -rf feeds/smpackage/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd*,miniupnpd-iptables,wireless-regdb}
        fi
        if [ "${{ env.INCLUDE_KENZOK8 }}" == "openwrt-packages" ]
        then
            if [[ "${{ env.DEFAULT_SOURCE }}" =~ "padavanonly" ]]
            then
                rm -rf feeds/feeds/kenzo/{luci-app-quickstart,luci-app-store,luci-lib-taskd,homeproxy,luci-app-homeproxy}
            fi
        fi

    - name: REPLACE TO 256M
      run: |
        if [ "${{ env.Tempoary_MEMORY }}" == "256M" ]
        then
            cd openwrt
            echo "CONFIG_FILE: $CONFIG_FILE"
            echo "Tempoary_FLAG: $Tempoary_FLAG"
            if [[ "${{ env.DEFAULT_SOURCE }}" == "coolsnowwolf/lede:master" ]]
            then
                echo "lede"
                sed -i 's/<0x580000 0x7200000>/<0x580000 0xee00000>/g' target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-nand.dts
                sed -i 's/116736k/243712k/g' target/linux/mediatek/image/filogic.mk
            elif [[ "${{ env.DEFAULT_SOURCE }}" == "immortalwrt/immortalwrt:master" ]]
            then
                echo "immortalwrt"
                sed -i 's/<0x580000 0x7200000>/<0x580000 0xee00000>/g' target/linux/mediatek/dts/mt7981b-cmcc-rax3000m-nand.dtso
                sed -i 's/<0x580000 0x7200000>/<0x580000 0xee00000>/g' package/boot/uboot-mediatek/patches/437-add-cmcc_rax3000m.patch
            else
                echo "Other"
                sed -i 's/<0x580000 0x7200000>/<0x580000 0xee00000>/g' target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m.dts
                sed -i 's/116736k/243712k/g' target/linux/mediatek/image/mt7981.mk
            fi
        fi

    - name: Accelerate
      if: env.CACHE_ACCELERATE == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: false
        toolchain: true
        skip: true
        clean: true
        prefix: ${{ github.workspace }}/openwrt

    - name: Run Diy Scripts
      run: |
        echo "Free space:"
        df -h
        chmod +x Scripts/AutoBuild_*.sh
        cd openwrt
        if [ "${{ env.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
        fi
        if [ "${{ github.event.inputs.INCLUDE_DOCKER }}" == true ]
        then
            echo "INCLUDE_DOCKER"
            echo -e "\nCONFIG_PACKAGE_luci-app-docker=y" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
            echo -e "\nCONFIG_PACKAGE_docker=y" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
            echo -e "\nCONFIG_DOCKER_CGROUP_OPTIONS=y" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
            echo -e "\nCONFIG_DOCKER_OPTIONAL_FEATURES=y" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
            echo -e "\nCONFIG_DOCKER_STO_EXT4=y" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
            echo -e "\nCONFIG_PACKAGE_docker-compose=y\n" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
        fi
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        make defconfig
        Firmware_Diy_Start
        rm -f .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        Firmware_Diy_Main
        Firmware_Diy
        Firmware_Diy_Other

    - name: Patch File
      run: |
        chmod +x Scripts/patch-file.sh
        cd openwrt
        $GITHUB_WORKSPACE/Scripts/patch-file.sh

    - name: Pre-download Libraries
      run: |
        cd openwrt
        ./scripts/feeds install -a
        make defconfig
        make download -j8

    - name: Build OpenWrt
      run: |
        cd openwrt
        make -j4 || make -j1 V=s
        [ "$?" == 0 ] && echo "Compile_Result=true" >> $GITHUB_ENV || echo "Compile_Result=false" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Rename Firmware Bin
      if: env.Compile_Result == 'true' && (!cancelled())
      run: |
        cd openwrt/bin/targets/*/*
        mapfile -d $'\0' found_files < <(find "$PWD" -type f -name "*.bin" -print0 2>/dev/null)
        if [ ${#found_files[@]} -gt 0 ]; then
          for file in "${found_files[@]}"; do
            filename=$(basename "$file")
            filename_without_ext="${filename%.*}"
            extension="${filename##*.}"
            new_filename="${filename_without_ext}_${{ env.FILE_DATE }}.${extension}"
            if [ "${{ github.event.inputs.Testing_KERNEL }}" == true ]
            then
                new_filename="${filename_without_ext}_TESTKERNEL_${{ env.FILE_DATE }}.${extension}"
            fi
            file_dir=$(dirname "$file")
            new_filepath="${file_dir}/${new_filename}"
            mv "$file" "$new_filepath"
            echo "Renamed $file to $new_filepath "
          done
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.Compile_Result == 'true' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.Compile_Result == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && env.Compile_Result == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASES == 'true' && env.Compile_Result == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG_NAME }}_${{ env.FILE_DATE }}
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        keep_minimum_runs: 20

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASES == 'true' && !cancelled()
      with:
        keep_latest: 20
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
